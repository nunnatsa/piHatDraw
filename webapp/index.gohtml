<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>RPiDraw</title>
    <style>
        html {
            color: white;
            background: black;
        }
        table, td, th {
            border: 1px solid white;
        }

        td {
            text-align:center;
            vertical-align:middle
        }

        table {
            border-collapse: collapse;
            padding: 0;
            margin: auto;
        }

        div#table_wrapper {
            margin: auto;
            padding: 0;
        }

        div#main {
            margin: auto;
            padding-left: 0;
            padding-right: 0;
        }

        div#control {
            margin-top: 1em;
            border: 1px solid white;
            padding: 1em;
            width: fit-content;
            float: left;
            margin-right: 1em;
        }

        h1 {
            text-align: center;
            margin-bottom: 2em;
        }

        td {
            width: 20px;
            height: 20px;
        }
    </style>
</head>
<body>

<div id="main">
    <h1>Pi Sense HAT Draw</h1>
    <div id="control">
        <p>
            <label for="colorPicker">Change Color</label> <input type="color" id="colorPicker" value="#ffffff"/>
        </p>
        <p>Tool:
            <input type="radio" id="toolTypePen" name="toolType" value=true checked />
            <label for="toolTypePen">Pen</label>
            <input type="radio" id="toolTypeEraser" name="toolType" value=false />
            <label for="toolTypeEraser">Eraser</label>
        </p>
        <p>
            <input id="pickColorFromPixel" type="button" value="Get current pixel color">
        </p>
        <p>
            <input id="reset" type="button" value="Reset">
        </p>
    </div>
    <div id="table_wrapper">
        <table id="matrix">
        </table>
    </div>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script type="text/javascript">

    let cursorID

    const socket = new WebSocket("ws://{{.Host}}:{{.Port}}/api/canvas/register");

    function markWindowBorders(i, j, td, win) {
        if (i === win.y) {
            if (j >= win.x && j <= win.x + 7) {
                td.style.borderTopWidth = "3px"
            }
        } else if (i === win.y + 7) {
            if (j >= win.x && j <= win.x + 7) {
                td.style.borderBottomWidth = "3px"
            }
        }

        if (j === win.x) {
            if (i >= win.y && i <= win.y + 7) {
                td.style.borderLeftWidth = "3px"
            }
        } else if (j === win.x + 7) {
            if (i >= win.y && i <= win.y + 7) {
                td.style.borderRightWidth = "3px"
            }
        }
    }

    socket.onmessage = function (e) {
        const data = JSON.parse(e.data)

        console.log(`Received new canvas: ${e.data}`)
        let mt = document.getElementById("matrix")
        while (mt.lastElementChild) {
            mt.removeChild(mt.lastElementChild);
        }

        for ( let i = 0; i < data.canvas.length; i++ ) {
            let line = data.canvas[i]
            let tr = document.createElement("tr")
            for (let j = 0; j < line.length; j++) {
                let cell = line[j]
                let td = document.createElement("td")
                td.id = getCelId(j, i)
                td.style.backgroundColor = cell

                markWindowBorders(i, j, td, data.window);

                tr.appendChild(td)
            }
            mt.appendChild(tr)
        }

        cursorID = getCelId(data.cursor.x, data.cursor.y)
        const cursorElement = document.getElementById(cursorID)
        cursorElement.style.color = reverseColor(cursorElement.style.backgroundColor)
        const tool = data.tool
        cursorElement.innerText = tool === "pen" ? '+' : tool === "eraser" ? 'x' : "?"

        if ( data.tool === "pen" ) {
            toolTypePen.checked = "checked"
        } else if ( data.tool === "eraser" ) {
            toolTypeEraser.checked = "checked"
        }

        colorPicker.value = data.pen.color
    }

    const colorPicker = document.getElementById("colorPicker")
    colorPicker.onchange = function(e) {
        $.post(
            "http://{{.Host}}:{{.Port}}/api/canvas/color",
            data=JSON.stringify({'color': colorPicker.value}),
            dataType="json"
        )
    }

    const toolTypePen = document.getElementById("toolTypePen")
    toolTypePen.onchange = function (e) {
        setTool("pen")
    }
    const toolTypeEraser = document.getElementById("toolTypeEraser")
    toolTypeEraser.onchange = function (e) {
        setTool("eraser")
    }

    pickColorFromPixel = document.getElementById("pickColorFromPixel")
    pickColorFromPixel.onclick = function (e) {
        const cell = document.getElementById(cursorID)
        const colors = cell.style.backgroundColor.match(/rgb\((\d+), (\d+), (\d+)\)/)
        if (colors && colors.length === 4) {
            const red = parseInt(colors[1]) << 16
            const green = parseInt(colors[2]) << 8
            const blue = parseInt(colors[3])
            const color = red | green | blue
            const reqData = `{"color": "#${color.toString(16).padStart(6, '0')}"}`

            $.post(
                "http://{{.Host}}:{{.Port}}/api/canvas/color",
                data = reqData,
                dataType = "json"
            )
        }
    }

    const resetBtn = document.getElementById("reset")
    resetBtn.onclick = function (e) {
        if ( confirm("Are you sure you want to reset? it will delete the whole picture. You can't undo this!") ) {
            $.post(
                "http://{{.Host}}:{{.Port}}/api/canvas/reset",
                data = `{"reset": true}`,
                dataType = "json"
            )
        }
    }

    function setTool(toolName) {
        $.post(
            "http://{{.Host}}:{{.Port}}/api/canvas/tool",
            data=JSON.stringify({'toolName': toolName}),
            dataType="json"
        )
    }

    function getCelId(x, y) {
        return `${x}`.padStart(2, '0') + '_' + `${y}`.padStart(2, '0')
    }

    function reverseColor(bg) {
        const rx = /rgb\((\d+), (\d+), (\d+)\)/
        let colors = bg.match(rx)
        if (!colors) {
            return 'rgb(255, 255, 255)'
        }

        const r = 255 - parseInt(colors[1])
        const g = 255 - parseInt(colors[1])
        const b = 255 - parseInt(colors[1])

        return `rgb(${r}, ${g}, ${b}`
    }
</script>
</body>
</html>
